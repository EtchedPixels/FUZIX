Adapted Sonoplex MC68302 board

https://retrobrewcomputers.org/doku.php?id=builderpages:plasmo:spx-mpu

This a system with a 68302@16MHz, 2.25MB of flash (holding a boot ROM and CP/M
68K) as well as a monitor, 1MB of RAM (256K battery backed) a 68692 DUART
providing a console port, an 82C55 PIO and an RTC (not yet handled).

There is a plug in board which provides a CF interface using the 82C55, and
interface points for the second DUART port and minimal SPI.


Memory Map

When we are loaded we have the 68302 internal I/O mapped at FFF000 and the
RAM mapped at 0.

000000-0FFFFF		RAM (1MB)
300000-300007		82C55 (odd side)
300000-300020		DUART (68692) (even side)
300040-30005F		RTC72743 (odd side)

Chip Selects

0		Boot Flash 256K (1 wait)
1		RAM, 4MB mapping (0 wait)
2		400000, 1MB 1 wait (flash)
3		500000, 1MB 1 wait (flash)

RAM is aliased in the low 1MB
GIMR is set to vector 80-9F
TMR1 is set to 10ms
The RTC is kicked into 24hr mode
DUART and TMR1 are the interrupt sources

The CP/M 68K environment runs from disk with the following diskdef, but is
byteswapped.

diskdef spx
  seclen 128
  tracks 64
  sectrk 1024
  blocksize 4096
  maxdir 512
  skew 0
  boottrk 1
  os 2.2
end

For Fuzix the provided booter.s file can be assembled and linked with as68
and lo68 on the SPX machine. It loads 60K from physical block 1+ of the disk
(block 0 is the partition table). This works fine because the CP/M filesystem
reserves a track which it never uses and we can put a partition table there
and a CP/M partition (which just protects the CP/M D: drive) of 8MB or so
before the Fuzix ones.

	as68 booter.s
	lo68 -r -o booter.68k booter.o


(FIXME copy over booter.s also booter.s needs to start with sector = 3
so that we start on sector 4 block after boot disk)

Need to decide what IDE endian to run Fuzix - easy enough to run with the
endianness fixed if stick to byte/byte disk I/O


The serial ports are mapped as follows

tty1	The DB25 serial port
tty2	The port on the CF card
Future:
tty3-5	The SCC ports (these are wired as RS422/485)

TODO

Write a front end CP/M loader module that has the kernel as data and boots it
Test the console and timer drivers
Test IDE
Write RTC driver
Investigate the SPI state of affairs, see if we can get SD working
Reboot logic

Longer Term

SCC RS485 drivers (serial and/or networking ?)
Ethernet over SPI

How to do swap ?

CF card:

8MB per 'drive'

dpb is 1024 sectors/track
bls 5 (4096)
EXM 1
DSM 2015
DRM 511
track offset 1

As we have 64 x 128K tracks we get 128K to play with so can write a partition
table including a map for CP/M D: and a kernel low, with Fuzix partitions 8MB+
on the drive.

