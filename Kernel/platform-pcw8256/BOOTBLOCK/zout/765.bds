binary-debuggable-source
0000 0000 d 
0000 0000 s FD_ST		.equ	0
0000 0000 d 
0000 0000 s FD_DT		.equ	1
0000 0000 d 
0000 0000 s stack		.equ	0xF400
0000 0000 d 
0000 0000 s fd765_statbuf	.equ	0xF402
0000 0000 d 
0000 0000 s start		.equ	0x0088		; start of execution once loaded
0000 0000 s 
f000 f000 d 
f000 f000 s 		.org 0xF000
f000 f000 s 
f000 f000 s ;
f000 f000 s ;	fd765_cyl must not move without updating the uzi startup code for
f000 f000 s ;	this platform
f000 f000 s ;
f000 f000 d 0000280902010302
f000 f000 s fd765_lead:	db 0, 0, 40, 9, 2, 1, 0x3, 2
f008 f008 d 0000000000000000
f008 f008 s 		db 0, 0, 0, 0, 0, 0, 0, 0
f010 f010 s ;
f010 f010 s ;	The boot rom calls us right here
f010 f010 s ;
f010 f010 d c3eaf0
f010 f010 s fd765_start:	jp fd_go
f013 f013 s 
f013 f013 d 386cc6d6c66c3800
f013 f013 s fontnum:	db 0x38, 0x6c, 0xc6, 0xd6, 0xc6, 0x6c, 0x38, 0x00
f01b f01b d 1838181818187e00
f01b f01b s 		db 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00
f023 f023 d 7cc6061c3066fe00
f023 f023 s 		db 0x7c, 0xc6, 0x06, 0x1c, 0x30, 0x66, 0xfe, 0x00
f02b f02b d 7cc6063c06c67c00
f02b f02b s 		db 0x7c, 0xc6, 0x06, 0x3c, 0x06, 0xc6, 0x7c, 0x00
f033 f033 d 1c3c6cccfe0c1e00
f033 f033 s 		db 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00
f03b f03b d fec0c0fc06c67c00
f03b f03b s 		db 0xfe, 0xc0, 0xc0, 0xfc, 0x06, 0xc6, 0x7c, 0x00
f043 f043 d 3860c0fcc6c67c00
f043 f043 s 		db 0x38, 0x60, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00
f04b f04b d fec60c1830303000
f04b f04b s 		db 0xfe, 0xc6, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00
f053 f053 d 7cc6c67cc6c67c00
f053 f053 s 		db 0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00
f05b f05b d 7cc6c67e060c7800
f05b f05b s 		db 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00
f063 f063 s ; fortunately error is only 3 symbols long
f063 f063 d fe6268786862fe00
f063 f063 s fonte:		db 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00
f06b f06b d 0000dc766060f000
f06b f06b s fontr:		db 0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00
f073 f073 d 00007cc6c6c67c00
f073 f073 s fonto:		db 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00
f07b f07b s 
f07b f07b d 
f07b f07b s digiprint:
f07b f07b d 26f0
f07b f07b s 		ld h, 0xF0		; font high
f07d f07d d 87
f07d f07d s 		add a, a
f07e f07e d 87
f07e f07e s 		add a, a
f07f f07f d 87
f07f f07f s 		add a, a
f080 f080 d c613
f080 f080 s 		add fontnum % 256	; and move to align
f082 f082 d 6f
f082 f082 s 		ld l, a
f083 f083 d 
f083 f083 s ldir8:
f083 f083 d 010800
f083 f083 s fd765_sensep:	ld bc, 8		; borrow the 8 to save a byte
f086 f086 d edb0
f086 f086 s 		ldir
f088 f088 d c9
f088 f088 s 		ret
f089 f089 s 
f089 f089 s 		
f089 f089 s ; bc = length, port
f089 f089 s ; hl = command buffer
f089 f089 d 
f089 f089 s fd765_sendcmd:
f089 f089 d db00
f089 f089 s 		in a, (FD_ST)
f08b f08b d 87
f08b f08b s 		add a, a
f08c f08c d 30fb
f08c f08c s 		jr nc, fd765_sendcmd
f08e f08e d fa99f0
f08e f08e s 		jp m, fd765_intdatain		; wtf ???
f091 f091 d eda3
f091 f091 s 		outi				; transfer command byte
f093 f093 d e3
f093 f093 s 		ex (sp), hl
f094 f094 d e3
f094 f094 s 		ex (sp), hl
f095 f095 d e3
f095 f095 s 		ex (sp), hl
f096 f096 d e3
f096 f096 s 		ex (sp), hl
f097 f097 d 20f0
f097 f097 s 		jr nz, fd765_sendcmd
f099 f099 d 
f099 f099 s fd765_intdatain:
f099 f099 d c9
f099 f099 s 		ret				; need to indicate an error
f09a f09a s 						; somehow on data in error
f09a f09a d 
f09a f09a s fd765_status:
f09a f09a d 2102f4
f09a f09a s 		ld hl, fd765_statbuf
f09d f09d d 
f09d f09d s fd765_status_1:
f09d f09d d db00
f09d f09d s 		in a, (FD_ST)
f09f f09f d 87
f09f f09f s 		add a, a
f0a0 f0a0 d 30fb
f0a0 f0a0 s 		jr nc, fd765_status_1
f0a2 f0a2 d 87
f0a2 f0a2 s 	        add a, a
f0a3 f0a3 d d0
f0a3 f0a3 s 		ret nc				; bit 6 was clear, so done
f0a4 f0a4 d eda2
f0a4 f0a4 s 		ini
f0a6 f0a6 d e3
f0a6 f0a6 s 		ex (sp), hl			; waste time for the 765
f0a7 f0a7 d e3
f0a7 f0a7 s 		ex (sp), hl			; to recover
f0a8 f0a8 d e3
f0a8 f0a8 s 		ex (sp), hl
f0a9 f0a9 d e3
f0a9 f0a9 s 		ex (sp), hl
f0aa f0aa d 18f1
f0aa f0aa s 		jr fd765_status_1
f0ac f0ac s 
f0ac f0ac s ;
f0ac f0ac s ;	We rely on this exiting with C = FD_DT
f0ac f0ac s ;
f0ac f0ac d 
f0ac f0ac s fd765_intwait:
f0ac f0ac d 010101
f0ac f0ac s 		ld bc, 1 * 256 + FD_DT		; send SENSE INTERRUPT STATUS
f0af f0af d dbf8
f0af f0af s 		in a, (0xF8)
f0b1 f0b1 d cb6f
f0b1 f0b1 s 		bit 5, a
f0b3 f0b3 d c8
f0b3 f0b3 s 		ret z				; wait for the 765 int to go off
f0b4 f0b4 d 2184f0
f0b4 f0b4 s 		ld hl, fd765_sensep + 1		; a suitable 0x08 in the code
f0b7 f0b7 d cd89f0
f0b7 f0b7 s 		call fd765_sendcmd
f0ba f0ba d cd9af0
f0ba f0ba s 		call fd765_status
f0bd f0bd d 3a02f4
f0bd f0bd s 		ld a, (fd765_statbuf)
f0c0 f0c0 d cb7f
f0c0 f0c0 s 		bit 7, a			; error
f0c2 f0c2 d 20e8
f0c2 f0c2 s 		jr nz, fd765_intwait
f0c4 f0c4 d cb77
f0c4 f0c4 s 		bit 6, a			; abnormal
f0c6 f0c6 d c0
f0c6 f0c6 s 		ret nz
f0c7 f0c7 d 0614
f0c7 f0c7 s 		ld b, 0x14			; give the controller time
f0c9 f0c9 d 3eb3
f0c9 f0c9 s fd765_wait:	ld a, 0xB3
f0cb f0cb d e3
f0cb f0cb s fd765_wait_1:	ex (sp), hl
f0cc f0cc d e3
f0cc f0cc s 		ex (sp), hl
f0cd f0cd d e3
f0cd f0cd s 		ex (sp), hl
f0ce f0ce d e3
f0ce f0ce s 		ex (sp), hl
f0cf f0cf d 3d
f0cf f0cf s 		dec a
f0d0 f0d0 d 20f9
f0d0 f0d0 s 		jr nz, fd765_wait_1
f0d2 f0d2 d 10f5
f0d2 f0d2 s 		djnz fd765_wait
f0d4 f0d4 d c9
f0d4 f0d4 s 		ret
f0d5 f0d5 s 		
f0d5 f0d5 s 		
f0d5 f0d5 s ;		C points at FD_DT
f0d5 f0d5 d 
f0d5 f0d5 s fd765_xfer_in:
f0d5 f0d5 d db00
f0d5 f0d5 s 		in a, (FD_ST)
f0d7 f0d7 d 87
f0d7 f0d7 s 		add a
f0d8 f0d8 d 30fb
f0d8 f0d8 s 		jr nc, fd765_xfer_in		; bit 7 clear
f0da f0da d 87
f0da f0da s 		add a
f0db f0db d f293f1
f0db f0db s 		jp p, fd765_boot_error		; bit 5 clear (short data ???)
f0de f0de d eda2
f0de f0de s 		ini				; transfer a byte
f0e0 f0e0 d 20f3
f0e0 f0e0 s 		jr nz, fd765_xfer_in		; next byte
f0e2 f0e2 d 1d
f0e2 f0e2 s 		dec e
f0e3 f0e3 d 20f0
f0e3 f0e3 s 		jr nz, fd765_xfer_in
f0e5 f0e5 s ;
f0e5 f0e5 s ;		Sector transferred
f0e5 f0e5 s ;
f0e5 f0e5 d 3e05
f0e5 f0e5 s fd765_xfer_done:ld a, 5
f0e7 f0e7 d d3f8
f0e7 f0e7 s 		out (0xF8), a			; terminate flag set
f0e9 f0e9 d c9
f0e9 f0e9 s 		ret
f0ea f0ea s 
f0ea f0ea d 
f0ea f0ea s fd_go:
f0ea f0ea d f3
f0ea f0ea s 		di
f0eb f0eb d 3100f4
f0eb f0eb s 		ld sp, stack			; so we can bank flip
f0ee f0ee d 3e84
f0ee f0ee s 		ld a, 0x84			; map the screen into bank 4/5
f0f0 f0f0 d d3f1
f0f0 f0f0 s 		out (0xf1), a			; and put them at 0x4000/0x8000
f0f2 f0f2 d 3c
f0f2 f0f2 s 		inc a
f0f3 f0f3 d d3f2
f0f3 f0f3 s 		out (0xf2), a
f0f5 f0f5 d 21009a
f0f5 f0f5 s 		ld hl, 0x4000 + 0x5A00		; base for roller ram
f0f8 f0f8 d 110080
f0f8 f0f8 s 		ld de, 0x8000			; bank 4 offset 0
f0fb f0fb d 0620
f0fb f0fb s 		ld b, 32
f0fd f0fd d c5
f0fd f0fd s roller_fill:	push bc
f0fe f0fe d 0608
f0fe f0fe s 		ld b, 8
f100 f100 d 4b
f100 f100 s 		ld c, e
f101 f101 d 
f101 f101 s roller_8
f101 f101 d 71
f101 f101 s 		ld (hl), c			; fill the low 3 bits 0-7
f102 f102 d 23
f102 f102 s 		inc hl
f103 f103 d 72
f103 f103 s 		ld (hl), d			; rest is bank and offset
f104 f104 d 23
f104 f104 s 		inc hl
f105 f105 d 0c
f105 f105 s 		inc c
f106 f106 d 10f9
f106 f106 s 		djnz roller_8			; do a character line
f108 f108 d e5
f108 f108 s 		push hl
f109 f109 d 216801
f109 f109 s 		ld hl, 360			; avoids the shift
f10c f10c d 19
f10c f10c s 		add hl, de			; Move on 720 bytes
f10d f10d d eb
f10d f10d s 		ex de, hl			; back into de
f10e f10e d e1
f10e f10e s 		pop hl
f10f f10f d c1
f10f f10f s 		pop bc				; do the scan lines
f110 f110 d 10eb
f110 f110 s 		djnz roller_fill		; Next roller char
f112 f112 d 210040
f112 f112 s 		ld hl, 0x4000			; patterned screen
f115 f115 d 11d002
f115 f115 s 		ld de, 0x2D0			; first set of 8 lines
f118 f118 d 
f118 f118 s whitetop:
f118 f118 d 36ff
f118 f118 s 		ld (hl), 0xff
f11a f11a d 23
f11a f11a s 		inc hl
f11b f11b d 1b
f11b f11b s 		dec de
f11c f11c d 7a
f11c f11c s 		ld a, d
f11d f11d d b3
f11d f11d s 		or e
f11e f11e d 20f8
f11e f11e s 		jr nz, whitetop
f120 f120 d 11302a
f120 f120 s 		ld de, 0x5A00 / 2 - 0x2D0	; pairs of bytes
f123 f123 d 
f123 f123 s greyscreen:
f123 f123 d 36aa
f123 f123 s 		ld (hl), 0xAA			; layout makes this a doddle
f125 f125 d 23
f125 f125 s 		inc hl
f126 f126 d 3655
f126 f126 s 		ld (hl), 0x55
f128 f128 d 23
f128 f128 s 		inc hl
f129 f129 d 1b
f129 f129 s 		dec de
f12a f12a d 7a
f12a f12a s 		ld a, d
f12b f12b d b3
f12b f12b s 		or e
f12c f12c d 20f5
f12c f12c s 		jr nz, greyscreen
f12e f12e d 3e81
f12e f12e s 		ld a, 0x81
f130 f130 d d3f1
f130 f130 s 		out (0xf1), a			; put memory back
f132 f132 d 3c
f132 f132 s 		inc a
f133 f133 d d3f2
f133 f133 s 		out (0xf2), a
f135 f135 d 3ead
f135 f135 s 		ld a, 0xAD			; bank 5 offset D
f137 f137 d d3f5
f137 f137 s 		out (0xF5), a
f139 f139 d af
f139 f139 s 		xor a
f13a f13a d d3f6
f13a f13a s 		out (0xF6), a
f13c f13c d 3e07
f13c f13c s 		ld a, 0x07
f13e f13e d d3f8
f13e f13e s 		out (0xF8), a
f140 f140 d 3e40
f140 f140 s 		ld a, 0x40
f142 f142 d d3f7
f142 f142 s 		out (0xF7), a
f144 f144 s 
f144 f144 s ;
f144 f144 s ;	9 * 512 byte sectors/track on the boot image. We load 12 tracks
f144 f144 s ;
f144 f144 d 
f144 f144 s fd765_boot	
f144 f144 d 3e84
f144 f144 s 		ld a, 0x84		; map display
f146 f146 d d3f2
f146 f146 s 		out (0xf2), a
f148 f148 d 3af4f1
f148 f148 s 		ld a, (fd765_cyl)
f14b f14b d 11e097
f14b f14b s 		ld de, 0x8000 + 5760 + 352
f14e f14e d cd7bf0
f14e f14e s 		call digiprint
f151 f151 d 3af6f1
f151 f151 s 		ld a, (fd765_sector)
f154 f154 d cd7bf0
f154 f154 s 		call digiprint
f157 f157 d 3e82
f157 f157 s 		ld a, 0x82
f159 f159 d d3f2
f159 f159 s 		out (0xf2), a		; back to main memory
f15b f15b d cdbaf1
f15b f15b s 		call fd765_begin
f15e f15e d 2033
f15e f15e s 		jr nz, fd765_boot_error
f160 f160 s ;
f160 f160 s ;		Sector loaded ok, we use the first 0x80 bytes of the loaded
f160 f160 s ;		code to do the progress bar
f160 f160 s ;
f160 f160 d 2600
f160 f160 s 		ld h, 0
f162 f162 d 3e84
f162 f162 s 		ld a, 0x84
f164 f164 d d3f2
f164 f164 s 		out (0xf2), a		; map in the screen
f166 f166 d c7
f166 f166 s 		rst 0
f167 f167 s ;		nop
f167 f167 d 3e82
f167 f167 s 		ld a, 0x82
f169 f169 d d3f2
f169 f169 s 		out (0xf2), a		; map back the loader
f16b f16b d 3af6f1
f16b f16b s 		ld a, (fd765_sector)
f16e f16e d 3c
f16e f16e s 		inc a
f16f f16f d fe0a
f16f f16f s 		cp 10
f171 f171 d 3008
f171 f171 s 		jr nc, fd765_nextcyl
f173 f173 d 32f6f1
f173 f173 s 		ld (fd765_sector), a
f176 f176 d 32f8f1
f176 f176 s 		ld (fd765_seclast), a
f179 f179 d 18c9
f179 f179 s 		jr fd765_boot
f17b f17b d 
f17b f17b s fd765_nextcyl:
f17b f17b d 3e01
f17b f17b s 		ld a, 1
f17d f17d d 32f6f1
f17d f17d s 		ld (fd765_sector), a
f180 f180 d 32f8f1
f180 f180 s 		ld (fd765_seclast), a
f183 f183 d 3af4f1
f183 f183 s 		ld a, (fd765_cyl)
f186 f186 d 3c
f186 f186 s 		inc a
f187 f187 d fe0d
f187 f187 s 		cp 13
f189 f189 d 302c
f189 f189 s 		jr nc, fd765_done
f18b f18b d 32f4f1
f18b f18b s 		ld (fd765_cyl), a
f18e f18e d 32fef1
f18e f18e s 		ld (fd765_cyl2), a
f191 f191 d 18b1
f191 f191 s 		jr fd765_boot
f193 f193 s 
f193 f193 s ; remap display, print Error message
f193 f193 d 
f193 f193 s fd765_boot_error:
f193 f193 d 3e84
f193 f193 s 		ld a, 0x84
f195 f195 d d3f2
f195 f195 s 		out (0xf2), a
f197 f197 d 2163f0
f197 f197 s 		ld hl, fonte
f19a f19a d 11a89a
f19a f19a s 		ld de, 0x8000 + 5760 + 344 + 720
f19d f19d d cd83f0
f19d f19d s 		call ldir8
f1a0 f1a0 d 216bf0
f1a0 f1a0 s 		ld hl, fontr
f1a3 f1a3 d e5
f1a3 f1a3 s 		push hl
f1a4 f1a4 d cd83f0
f1a4 f1a4 s 		call ldir8
f1a7 f1a7 d e1
f1a7 f1a7 s 		pop hl
f1a8 f1a8 d e5
f1a8 f1a8 s 		push hl
f1a9 f1a9 d cd83f0
f1a9 f1a9 s 		call ldir8
f1ac f1ac d 2173f0
f1ac f1ac s 		ld hl, fonto
f1af f1af d cd83f0
f1af f1af s 		call ldir8
f1b2 f1b2 d e1
f1b2 f1b2 s 		pop hl
f1b3 f1b3 d cd83f0
f1b3 f1b3 s 		call ldir8
f1b6 f1b6 d 76
f1b6 f1b6 s 		hlt
f1b7 f1b7 s 		
f1b7 f1b7 s 
f1b7 f1b7 d c38800
f1b7 f1b7 s fd765_done:	jp start			; go go go....
f1ba f1ba s 
f1ba f1ba d 
f1ba f1ba s fd765_begin:
f1ba f1ba s ;		The ROM did this bit for us!
f1ba f1ba s ;		call fd765_intwait
f1ba f1ba s ;		ld hl, fd765_setup		; set up drive parameters
f1ba f1ba s ;		ld bc, #(5 * 256 + FD_DT)	; 5 byte command
f1ba f1ba s ;		call fd765_sendcmd		; set up the drive
f1ba f1ba s ;		call fd765_status
f1ba f1ba s 
f1ba f1ba d 3e06
f1ba f1ba s 		ld a, 6				; clear terminal count flag
f1bc f1bc d d3f8
f1bc f1bc s 		out (0xF8), a
f1be f1be s 
f1be f1be d cdacf0
f1be f1be s 		call fd765_intwait
f1c1 f1c1 d 21fcf1
f1c1 f1c1 s 		ld hl, fd765_seek
f1c4 f1c4 d 0603
f1c4 f1c4 s 		ld b, 3				; C was set by intwait
f1c6 f1c6 d cd89f0
f1c6 f1c6 s 		call fd765_sendcmd
f1c9 f1c9 d cdacf0
f1c9 f1c9 s 		call fd765_intwait
f1cc f1cc d 0609
f1cc f1cc s 		ld b, 9				; READ, C was set by intwait
f1ce f1ce d 21f2f1
f1ce f1ce s 		ld hl, fd765_read_data
f1d1 f1d1 d cd89f0
f1d1 f1d1 s 		call fd765_sendcmd		; send the READ DATA command
f1d4 f1d4 d ed5bf0f1
f1d4 f1d4 s 		ld de, (codebase)
f1d8 f1d8 d 210002
f1d8 f1d8 s 		ld hl, 512
f1db f1db d 19
f1db f1db s 		add hl, de
f1dc f1dc d 22f0f1
f1dc f1dc s 		ld (codebase), hl		; move on 512
f1df f1df d eb
f1df f1df s 		ex de, hl
f1e0 f1e0 d 1e02
f1e0 f1e0 s 		ld e, 2				; 512 bytes
f1e2 f1e2 d 0600
f1e2 f1e2 s 		ld b, 0
f1e4 f1e4 d cdd5f0
f1e4 f1e4 s 		call fd765_xfer_in		; copy the data
f1e7 f1e7 d cd9af0
f1e7 f1e7 s 		call fd765_status		; get the status bits
f1ea f1ea s 		; failed ?
f1ea f1ea d 3a02f4
f1ea f1ea s 		ld a, (fd765_statbuf)
f1ed f1ed d e6cb
f1ed f1ed s 		and 0xCB
f1ef f1ef d c9
f1ef f1ef s 		ret
f1f0 f1f0 s 
f1f0 f1f0 d 0000
f1f0 f1f0 s codebase:	dw 0x0000
f1f2 f1f2 s 
f1f2 f1f2 d 
f1f2 f1f2 s fd765_read_data:
f1f2 f1f2 d 66
f1f2 f1f2 s 		db 0x66		; Normal MFM read
f1f3 f1f3 d 00
f1f3 f1f3 s 		db 0		; Drive 0, head 0
f1f4 f1f4 d 00
f1f4 f1f4 s fd765_cyl:	db 0		; cylinder
f1f5 f1f5 d 00
f1f5 f1f5 s 		db 0		; head
f1f6 f1f6 d 02
f1f6 f1f6 s fd765_sector:	db 2		; sector
f1f7 f1f7 d 02
f1f7 f1f7 s 		db 2		; 512 bytes
f1f8 f1f8 d 02
f1f8 f1f8 s fd765_seclast:	db 2		; last sector
f1f9 f1f9 d 2a
f1f9 f1f9 s 		db 0x2A		; gap length
f1fa f1fa d ff
f1fa f1fa s 		db 0xFF		; no room for this byte so we overwrite the
f1fb f1fb s 				; jp further down 8)
f1fb f1fb d 08
f1fb f1fb s fd765_sense	db 0x08		; Sense interrupt
f1fc f1fc d 0f
f1fc f1fc s fd765_seek	db 0x0F
f1fd f1fd d 00
f1fd f1fd s 		db 0
f1fe f1fe d 00
f1fe f1fe s fd765_cyl2:	db 0
f1ff f1ff s 		; Checksum
f1ff f1ff d 3d
f1ff f1ff s checksum:	db 0x3d
f083 a ldir8
f0ea a fd_go
f063 a fonte
f073 a fonto
f06b a fontr
f013 a fontnum
f1f4 a fd765_cyl
f101 a roller_8
f1f0 a codebase
f1fe a fd765_cyl2
f1ff a checksum
f000 a fd765_lead
f1b7 a fd765_done
f1fc a fd765_seek
f118 a whitetop
f144 a fd765_boot
f0c9 a fd765_wait
f07b a digiprint
f1ba a fd765_begin
f1fb a fd765_sense
f010 a fd765_start
f0cb a fd765_wait_1
f123 a greyscreen
f083 a fd765_sensep
f1f6 a fd765_sector
f09a a fd765_status
f0fd a roller_fill
f089 a fd765_sendcmd
f0d5 a fd765_xfer_in
f1f8 a fd765_seclast
f0ac a fd765_intwait
f17b a fd765_nextcyl
f09d a fd765_status_1
f1f2 a fd765_read_data
f0e5 a fd765_xfer_done
f099 a fd765_intdatain
f193 a fd765_boot_error
