An initial port of Fuzix to the Cromemco Z1 and similar systems.

Bank 0		Kernel
		0000-00FF, F200-FFFF are propogated into the other banks

Bank 1-6	User
		0000-00FF start with shared vectors
			  FIXME: we need to clean this up in program_vectors
			  from the kernel copy ????
		0100-EFFF application
		F000-F1FF udata copy for this application
		F200-FFFF common copy

The kstack and istack exist in each bank. We'll normally only use the kernel
one but there are cases we switch and borrow a bit of the other bank copy.
It's easier to arrange this way anyhow.

Limitations

-	Only supports floppy disks and currently only supports DS/DD eight
	inch media for the filesystems
-	Memory size is not probed
-	Only the console port is enabled

Notes

-	The emulator appears to be very flaky when it comes to serial emulation
	but pretty decent on the floppy side. However it needs patching to
	make it understand Fuzix DS/DD media as opposed to the weird Cromemco
	SD/DD mixed formats. It also needs patching for uart bugs 8(

Bugs


TODO
DONE	-		Interrupts properly (and IM2)
DONE	-		not yet doing tty interrupts nicely with buffer
			and queues
DONE	-		Disk names (so you can say 'fd1' not 257)
	-		Eject support for floppies
	-		Floppy ioctls, mode set etc
	-		Auto probe
	-		Disk interleave enable (need a block shuffling tool)
	-		5.25" disks (plus hack emulator to also allow for
			sane 5.25" formats including PC)
	-		fast 512 byte interbank copier

Testing
-	Build the kernel and get a fuzix.dsk (SS/SD)
-	Build user space
-	cd Standalone/filesystem-src
	./build-mini-filesystem fs.dsk 64 2464
-	Install fuzix.dsk as drivea.dsk and fs.dsk as driveb.dsk
-	Fire up the patched cromemco simulator
	cromemcosim -x rdos252.hex
-	Hit power, hit run, hit return a few times to get a Booting
	message
-	At the boot prompt reply 'fd1'


Hardware supported

-	TU-ART at 0x00 strapped for 8080 mode (typically part of an FDC card)
-	16FDC or 64FDC with 8" DSDD drives

Hardware to support

-	Additional TU-ARTs
-	Line printer
-	Second FDC
-	Joystick & Sound
-	Do something cool with the fp lights
-	Hard disk as and if docs/emulation appears for it. Maybe also an
	IDE driver for a modern S100 add in.



UARTs: TMS 5501 x 2 per board. These can do Z80 IM2 where the vector is
determined by A7-A5 of the IRQ (used as D7-D5 of the vector) or generate the
8080 RST vectors.

R 0		Status

7: set if tx buffer empty
6: set if rx data available
5: irq pending
4: start bit detected
3: full bit detected
2: serial receive line state
1: overrun (clear on read)
0: frame error (clear on valid rx)

W 0
7: 1 for one stop 0 for 2
0-6 set baud rate (all 0 off)
0: 110
1: 150
2: 300
3: 1200
4: 2400
5: 4800
6: 9600
(but see later)

R 1		Data received

W 1		Load tx

W 2		cmd

0:		reset (self clears)
1:		break send
2:		IRQ on parallel msb
3:		May respond to an IRQ by gating an RST
		Low prevents gating instructions
4:		Baud rate x8
5:		Test


R 3:		Interrupt address (gives service priority order for events)
		Each read clears a priority

		C7 timer 1
		CF timer 2
		D7 !sens
		DF timer 3
		E7 rx data
		EF tx data
		F7 timer 4
		FF timer 5 (or none)

W 3:		Interrupt mask

7: timer 5
6: timer 4
5: tx buffer empty
4: rx data ready
3: timer 3
2: !sens
1: timer 2
0: timer 1

R 4:
	Read parallel input data captured after strobe
W 4:
	Write parallel

	(Parallel will halt the CPU for the other end to respond .. !)

W 5:	timer 1 (decremented ever 64uS - longest interval 16.32ms)

W 6:	timer 2 (ditto)

W 7:	timer 3 (ditto)

W 8:	timer 4 (ditto)

W 9:	timer 5 (ditto)




The 4FDC has a uart at 0 (parallel out is used for disk control)
Disk (FD1771).  16FDC is same ports but a 1793

Parallel in is wired so that (16FDC)
	D7 = DRQ/RTC (Jumper sets it to 512ms clock used with 5501 int)
	D6 = Seek in progress
	D3 = Switch 5
	D2 = Switch 6
	D1 = Switch 7
	D0 = Switch 8

4FDC has only D7 (DRQ) optional - default off, D6 seek in progress

64FDC
	D7 = DRQ/RTC
	D6 = 1
	D5 = ?
	D4-D0 Switch 5/1-4


16FDC out
	D6 clear to eject (not always supported)
	D5 set to disconnect drive select (shared disk configurations)
	D4 clear for fast  step mode (8" drives), set once seek complete sent
	D3 clear to force drive to track 0 (restore)
	D2 clear activates control OUT (test pin)
	D1 side select (0 for second side of 2 sided media)

4FDC out
	D6: eject left
	D5: eject right
	D4: clear for fast seek
	D3:  cler for restore
	D2: clear activates daisy chain

64FDC out
	D5: drive select override (as 16FDC)
	D2: control out (as 16FDC)
	D1: side select (as 16FDC)
	
(hex)
R 30	status 
W 30	command
R 31	track
W 31	track
R 32	sector
W 32	sector
R 33	data
W 33	data
R 34	flags
	D7: !DRQ
	D6: !BOOT (0 SW3 set to boot)
	D5  HEADLOAD	(Drive sect if high on 64FDC)
	D4  Zero mean switch inhibit init is on (16FDC)
	D3  motor is on (16FDC) on = 1
	D2  motor timeout (16FDC) timedout = 1
	D1 autowait timeout if 1
	D0: End of Job
W 34	control
	D7: autowait - 34H will hold CPU in wait until DRQ or EOJ or RESET
	D6: double density (4FDC not ??)
	D5: motor on
	D4: 1 = 8" (fast step) 0 = 5.25 (slow step)
	D3-D0 - drive select (only one at a time)

W 40	Disables boot rom as a side effect


W 40	bank select



Interrupt vectors
24 uart1a parallel port
28 uart1a rda
2A uart1a tbe
34 uart1b parallel port
38 uart1b RDA
3A uart1b TBE

(Uart0 strapped for 8080 mode for some reason)
C7 uart 0a timer 1
CF uart 0a timer 2
D7 FDC EOJ
DF uart 0a timer 3
E7 uart 0a RDA
EF uart 0a TBE
F7 uart 0a timer 4
FF uart 0a timer 5 also RTC timer

Doc actually says

D7-D5 = A7-A5 of port
D4 = 0 for A 1 for B
D3-1
	000	timer 1
	001	timer 2
	010	!sensa
	011	timer 3
	100	rda
	101	tbe
	110	timer4
	111	timer5 (PI7)



Disks

256256	128	26	77		8" SS SD
512512	128	26	77		8" DS SD

1261568	512	16	77		8" DS DD

