CC = cl65
ASM = ca65
AR = ar65
LINKER = ld65
CC_OPT = -t none -O -D__STDC__ --all-fastcall -c -O -I../include/ -I../include/6502/
ASM_OPT = -o
LINKER_OPT = -m -i -o
SRC_CRT0 = crt0_6502.s
OBJ_CRT0 = $(SRC_CRT0:.s=.o)
SRC_ASM =
OBJ_ASM = $(SRC_ASM:.s=.o)
#
#	Library routines. cc65 has its own library which has some overlap.
#	For standalone things like abs and strings we try and favour the C
#	library lib but we use our stdio etc
#
#	Fix me there pmemalign and a couple of other standard funcs we
#	don't have. Calling these will result in a mess but once we've fixed
#	our library to cover them it should be fine. There are also some we
#	have through the cc65 lib but need in other ports (strxfrm, strftime,
#	snprintf, vsnprintf etc)
#
#	FIXME:
#	Due to ctype differences we can't use the stricmp/strcasecmp and
#	friends in the CC lib. We should import the useful functions and
#	tweak them to fit our libc.
#
#	FIXME2:
#	The cc65 libc printf/scanf type helpers are rather nicely done and
#	very tightly coded. We want to make use of them eventually
#
#
SRC_C =  __argv.c abort.c asctime.c assert.c atexit.c atoi.c
SRC_C += bcmp.c bcopy.c bsearch.c bzero.c calloc.c cfree.c clock.c closedir.c
SRC_C += clock_gettime.c clock_getres.c clock_settime.c
SRC_C += creat.c crypt.c ctime.c difftime.c err.c errno.c error.c
SRC_C += execl.c execv.c execvp.c exit.c
SRC_C += fclose.c fflush.c fgetc.c fgetgrent.c fgetpwent.c
SRC_C += fgetpos.c fgets.c fopen.c fprintf.c fputc.c fputs.c fread.c free.c
SRC_C += fsetpos.c ftell.c fwrite.c getcwd.c
SRC_C += getenv.c __getgrent.c getgrgid.c getgrnam.c getopt.c
SRC_C += getpw.c __getpwent.c getpwnam.c getpwuid.c gets.c gettimeofday.c
SRC_C += gmtime.c gmtime_r.c grent.c index.c isatty.c itoa.c killpg.c
SRC_C += libintl.c
SRC_C += localtim.c localtim_r.c lseek.c lsearch.c lstat.c ltoa.c ltostr.c
SRC_C += malloc.c mkfifo.c nanosleep.c opendir.c pause.c perror.c
SRC_C += popen.c printf.c putenv.c putgetch.c putpwent.c pwent.c qsort.c
SRC_C += raise.c rand.c readdir.c readlink.c realloc.c regerror.c
SRC_C += regsub.c remove.c rewind.c rindex.c setbuffer.c setenv.c setjmp.c
SRC_C += setlocale.c setvbuf.c settimeofday.c sleep.c sprintf.c
SRC_C += stat.c stdio0.c stime.c
SRC_C += strcasecmp.c strcasestr.c strdup.c stricmp.c strlcpy.c strncasecmp.c
SRC_C += strnicmp.c strnlen.c strsep.c
SRC_C += system.c time.c tmpnam.c ttyname.c
SRC_C += tzset.c ungetc.c utent.c utimes.c utsname.c
SRC_C += vfprintf.c vprintf.c wait.c xitoa.c pathconf.c
SRC_C += gethostname.c sysconf.c confstr.c memccpy.c getpass.c
SRC_C += strtol.c
# ctype
SRC_C += toupper.c tolower.c toascii.c isascii.c isalnum.c isalpha.c
SRC_C += iscntrl.c isdigit.c isgraph.c islower.c ispunct.c isspace.c
SRC_C += isupper.c isxdigit.c isoctal.c 
# tty layer
SRC_C += tcgetattr.c tcsetattr.c tcdrain.c tcflow.c tcflush.c
SRC_C += cfmakeraw.c cfspeed.c revoke.c
# scanf
SRC_C += fscanf.c scanf.c sscanf.c vfscanf.c vscanf.c vsscanf.c
# Seems to give the compiler a hard time
SRC_HARD += regexp.c
# Not supported yet
#SRC_C += initgroups.c
# Pieces we inherit in this case from the compiler library instead
#SRC_C += strcpy.c strlen.c abs.c atoi.c atol.c labs.c
#SRC_C += strcat.c strchr.c strcmp.c strcspn.c strncat.c strncmp.c
#SRC_C += strncpy.c strpbrk.c strrchr.c strspn.c strstr.c strtok.c
#SRC_C += memchr.c memcmp.c memcpy.c memset.c strtol.c

OBJ_C = $(SRC_C:.c=.o)
OBJ_ALL = $(OBJ_ASM) $(OBJ_C)

all: syslib.lib crt0_6502.o

fuzix6502/Makefile: ../tools/syscall_6502.c ../../Kernel/include/syscall_name.h
	(cd ..; make tools/syscall_6502)
	../tools/syscall_6502

syslib.lib: fuzix6502/Makefile $(OBJ_C)
	(cd fuzix6502; make)
	$(AR) a syslib.lib $(OBJ_C)
	ln -sf syslib.lib c.lib

$(OBJ_ASM):%.o: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.o=.s)

$(OBJ_CRT0):%.o: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.o=.s)

$(OBJ_C):%.o: %.c
	$(CC) $(CC_OPT) $(@:.o=.c)

$(OBJ_HARD):%.o: %.c
	$(CC) $(CC_NOOPT) $(@:.o=.c)

clean:
	rm -rf *.o *.lib *~ syscall.l  libc.l syslib.l
	(cd fuzix6502; make clean)
