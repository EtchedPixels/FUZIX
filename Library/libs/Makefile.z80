CC = fcc -m$(USERCPU)
ASM ?= sdasz80
AR = sdar
LINKER = sdldz80
PLATFORM ?=
export PLATFORM
# Historically we stuck non relocatable Z80 crt0 at an odd place. Preserve
# it for now but don't break other targets
CPUNAME ?=
CC_OPT = $(FUZIX_CCOPTS) -c
CC_NOOPT = -c
ASM_OPT = -l -o -s
LINKER_OPT = -m -i -o
SRC_CRT0 = crt0$(PLATFORM)$(CPUNAME).s
OBJ_CRT0 = $(SRC_CRT0:.s=.rel)
SRC_CRT0NS = crt0nostdio$(PLATFORM)$(CPUNAME).s
OBJ_CRT0NS = $(SRC_CRT0NS:.s=.rel)
SRC_CRT0R = crt0$(PLATFORM)_$(USERCPU)_rel.s
OBJ_CRT0R = $(SRC_CRT0R:.s=.rel)
SRC_CRT0NSR = crt0nostdio$(PLATFORM)_$(USERCPU)_rel.s
OBJ_CRT0NSR = $(SRC_CRT0NSR:.s=.rel)
SRC_ASM = enter.s htonl-$(USERCPU).s htons-$(USERCPU).s
OBJ_ASM = $(SRC_ASM:.s=.rel)
SRC_C =  __argv.c a64l.c abort.c aes256.c asctime.c assert.c atexit.c atoi_small.c
SRC_C += bcmp.c bcopy.c bsearch.c bzero.c calloc.c cfree.c clock.c closedir.c
SRC_C += closedir_r.c clock_gettime.c clock_getres.c clock_settime.c
SRC_C += creat.c crypt.c ctermid.c ctime.c cuserid.c
SRC_C += drand48.c err.c errno.c error.c
SRC_C += execl.c execv.c execvp.c exit.c
SRC_C += fclose.c fdatasync.c fflush.c fgetc.c fgetgrent.c fgetpwent.c
SRC_C += fgetpos.c fgets.c fopen.c fork.c fprintf.c fputc.c fputs.c fread.c
SRC_C += free.c fsetpos.c fsync.c ftell.c fwrite.c getcwd.c
SRC_C += getenv.c __getgrent.c getgrgid.c getgrnam.c getloadavg.c getlogin.c
SRC_C += getopt.c
SRC_C += getpw.c __getpwent.c getpwnam.c getpwuid.c gets.c gettimeofday.c
SRC_C += getw.c gmtime.c gmtime_r.c grent.c
SRC_C += inet_addr.c inet_aton.c inet_network.c inet_ntoa.c inet_ntop.c inet_pton.c
SRC_C += index.c initgroups.c isatty.c killpg.c
SRC_C += l64a.c libintl.c localtim.c localtim_r.c
SRC_C += lrand48.c lseek.c lsearch.c lstat.c ltoa.c ltostr.c
SRC_C += malloc.c mkfifo.c mkstemps.c mntent.c nanosleep.c
SRC_C += opendir.c opendir_r.c pause.c perror.c
SRC_C += popen.c printf.c putenv.c putgetch.c putpwent.c putw.c pwent.c qsort.c
SRC_C += raise.c rand.c readdir.c readlink.c realloc.c recv.c
SRC_C += recvfrom.c regerror.c
SRC_C += regsub.c remount.c remove.c rewind.c rewinddir.c rindex.c
SRC_C += rootmntent.c seekdir.c
SRC_C += send.c sendto.c setbuffer.c setenv.c
SRC_C += setlocale.c setvbuf.c settimeofday.c sgetl.c sleep.c sprintf.c
SRC_C += sputl.c stat.c statvfs.c stdio0.c stime.c
SRC_C += strcasecmp.c strcasestr.c strdup.c stricmp.c strlcpy.c strncasecmp.c
SRC_C += strnlen.c strnicmp.c strsep.c strxfrm.c strcoll.c strsignal.c
SRC_C += strtod.c strtok_r.c strtol.c swab.c system.c swapon.c telldir.c
SRC_C += tfind.c time.c tmpfile.c tmpnam.c tsearch.c ttyname.c
SRC_C += tzset.c umount.c ungetc.c usleep.c utent.c utimes.c utsname.c
SRC_C += vfprintf.c vprintf.c wait.c xitoa.c pathconf.c
SRC_C += gethostname.c sysconf.c confstr.c memccpy.c getpass.c
# ctype
SRC_C += isalnum.c isalpha.c isascii.c isblank.c iscntrl.c isdigit.c
SRC_C += isgraph.c islower.c isprint.c ispunct.c isspace.c isupper.c
SRC_C += isxdigit.c toupper.c tolower.c
# tty layer
SRC_C += tcgetattr.c tcsetattr.c tcdrain.c tcflow.c tcflush.c
SRC_C += cfmakeraw.c cfspeed.c revoke.c
# scanf
SRC_C += fscanf.c scanf.c sscanf.c vfscanf.c vscanf.c vsscanf.c
# Seems to give the compiler a hard time
SRC_HARD += regexp.c
# Pieces we inherit in this case from the compiler library instead
#SRC_C += strcpy.c strlen.c abs.c atof.c atoi.c atol.c labs.c
#SRC_C += strcat.c strchr.c strcmp.c strcspn.c strncat.c strncmp.c
#SRC_C += strncpy.c strpbrk.c strrchr.c strspn.c strstr.c strtok.c
#SRC_C += memchr.c memcmp.c memcpy.c memset.c

SRC_CT += termcap.c tgetent.c

SRC_CURS = $(shell find curses -name '*.c')

SRC_LM += acosf.c acoshf.c asinf.c asinhf.c atan2f.c atanf.c atanhf.c
SRC_LM += cbrtf.c ceilf.c copysignf.c erff.c expf.c expm1f.c
SRC_LM += fabsf.c fdimf.c floorf.c fmaxf.c fminf.c fmodf.c frexpf.c
SRC_LM += hypotf.c ilogbf.c j0f.c j1f.c jnf.c
SRC_LM += ldexpf.c lgammaf.c lgammaf_r.c logf.c log2f.c log10f.c logbf.c
SRC_LM += lrintf.c lroundf.c
SRC_LM += modff.c nearbyintf.c nextafterf.c powf.c
SRC_LM += remainderf.c remquof.c rintf.c roundf.c
SRC_LM += scalbnf.c scalbinf.c
SRC_LM += sinf.c sincosf.c sinhf.c
SRC_LM += sqrtf.c tgammaf.c
SRC_LM += vfscanf_m.c vfprintf_m.c
SRC_LM += __expo2f.c __float_bits.c __fpclassifyf.c __log1pf.c __signgam.c

SRC_TM = tinymalloc.c

SRC_RES = resolv.c

SRC_READLINE = readline.c readline_fn.c

OBJ_C = $(SRC_C:.c=.rel)
OBJ_CURS = $(SRC_CURS:.c=.rel)
OBJ_CT = $(SRC_CT:.c=.rel)
OBJ_LM = $(SRC_LM:.c=.rel)
OBJ_TM = $(SRC_TM:.c=.rel)
OBJ_HARD = $(SRC_HARD:.c=.rel)
OBJ_ALL = $(OBJ_ASM) $(OBJ_C) $(OBJ_HARD)
OBJ_RES = $(SRC_RES:.c=.rel)
OBJ_READLINE = $(SRC_READLINE:.c=.rel)

all: c$(PLATFORM)$(CPUNAME).lib crt0$(PLATFORM)$(CPUNAME).rel crt0nostdio$(PLATFORM)$(CPUNAME).rel \
     crt0$(PLATFORM)_$(USERCPU)_rel.rel crt0nostdio$(PLATFORM)_$(USERCPU)_rel.rel \
     liberror.txt curses$(PLATFORM)$(CPUNAME).lib termcap$(PLATFORM)$(CPUNAME).lib \
     m$(PLATFORM)$(CPUNAME).lib tinymalloc$(PLATFORM)$(CPUNAME).lib resolv$(PLATFORM)$(CPUNAME).lib \
     readline$(PLATFORM)$(CPUNAME).lib

libc.l:%.l:$(OBJ_ALL)
	ls $(OBJ_ALL) > libc.l

syscall.l: fuzix/syslib.l
	../tools/syscall $(USERCPU)
	(cd fuzix$(USERCPU); $(MAKE))
	cat fuzix$(USERCPU)/syslib.l | tr " " "\\n" | sed -e "s/^/fuzix"$(USERCPU)"\//" >syscall.l

sdcc$(USERCPU).lib:
	../tools/libclean $(USERCPU)

syslib$(PLATFORM)$(CPUNAME).lib: syscall.l libc.l sdcc$(USERCPU).lib
	cat libc.l syscall.l >syslib.l
	cp sdcc$(USERCPU).lib syslib$(PLATFORM)$(CPUNAME).lib
	$(AR) rc syslib$(PLATFORM)$(CPUNAME).lib @syslib.l
	$(AR) s syslib$(PLATFORM)$(CPUNAME).lib

c$(PLATFORM)$(CPUNAME).lib: syslib$(PLATFORM)$(CPUNAME).lib
	ln -sf syslib$(PLATFORM)$(CPUNAME).lib c$(PLATFORM)$(CPUNAME).lib

fuzix/syslib.l:
	../tools/syscall $(USERCPU)
	$(MAKE) -C fuzix$(USERCPU)

liberror.txt:
	../tools/liberror > liberror.txt

curses$(PLATFORM)$(CPUNAME).lib: $(OBJ_CURS)
	$(AR) rc curses$(PLATFORM)$(CPUNAME).lib $(OBJ_CURS)
	$(AR) s curses$(PLATFORM)$(CPUNAME).lib

m$(PLATFORM)$(CPUNAME).lib: $(OBJ_LM)
	$(AR) rc m$(PLATFORM)$(CPUNAME).lib $(OBJ_LM)
	$(AR) s m$(PLATFORM)$(CPUNAME).lib

termcap$(PLATFORM)$(CPUNAME).lib: $(OBJ_CT)
	$(AR) rc termcap$(PLATFORM)$(CPUNAME).lib $(OBJ_CT)
	$(AR) s termcap$(PLATFORM)$(CPUNAME).lib

tinymalloc$(PLATFORM)$(CPUNAME).lib: $(OBJ_TM)
	$(AR) rc tinymalloc$(PLATFORM)$(CPUNAME).lib $(OBJ_TM)
	$(AR) s tinymalloc$(PLATFORM)$(CPUNAME).lib

resolv$(PLATFORM)$(CPUNAME).lib: $(OBJ_RES)
	$(AR) rc resolv$(PLATFORM)$(CPUNAME).lib $(OBJ_RES)
	$(AR) s resolv$(PLATFORM)$(CPUNAME).lib

readline$(PLATFORM)$(CPUNAME).lib: $(OBJ_READLINE)
	$(AR) rc readline$(PLATFORM)$(CPUNAME).lib $(OBJ_READLINE)
	$(AR) s readline$(PLATFORM)$(CPUNAME).lib

$(OBJ_ASM):%.rel: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.rel=.s)

$(OBJ_CRT0):%.rel: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.rel=.s)

$(OBJ_CRT0NS):%.rel: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.rel=.s)

$(OBJ_CRT0R):%.rel: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.rel=.s)

$(OBJ_CRT0NSR):%.rel: %.s
	$(ASM) $(ASM_OPT) $@ $(@:.rel=.s)

$(OBJ_C):%.rel: %.c
	$(CC) $(CC_OPT) $(@:.rel=.c)

$(OBJ_CT):%.rel: %.c
	$(CC) $(CC_OPT) $(@:.rel=.c)

$(OBJ_CURS):%.rel: %.c
	$(CC) $(CC_OPT) $(@:.rel=.c) -o $@

$(OBJ_LM):%.rel: %.c
	$(CC) $(CC_OPT) -DBUILD_LIBM $< -o $@

$(OBJ_TM):%.rel: %.c
	$(CC) $(CC_OPT) $(@:.rel=.c)

$(OBJ_RES):%.rel: %.c
	$(CC) $(CC_OPT) $(@:.rel=.c)

$(OBJ_READLINE):%.rel: %.c
	$(CC) $(CC_OPT) $(@:.rel=.c)

$(OBJ_HARD):%.rel: %.c
	$(CC) $(CC_NOOPT) $(@:.rel=.c)

clean:
	rm -rf *.rel *.asm *.sym *.lst *.lib *~ syscall.l  libc.l syslib.l liberror.txt *.o
	(cd curses; rm -rf *.rel *.asm *.sym *.lst *~ *.o)
	-(cd fuzixz80; $(MAKE) clean; rm -f Makefile)
	-(cd fuzixr2k; $(MAKE) clean; rm -f Makefile)

install:
	cp crt0$(PLATFORM)$(CPUNAME).rel crt0nostdio$(PLATFORM)$(CPUNAME).rel c$(PLATFORM)$(CPUNAME).lib /opt/fcc/lib/
	cp curses$(PLATFORM)$(CPUNAME).lib termcap$(PLATFORM)$(CPUNAME).lib /opt/fcc/lib/
	cp m$(PLATFORM)$(CPUNAME).lib tinymalloc$(PLATFORM)$(CPUNAME).lib /opt/fcc/lib/
	cp readline$(PLATFORM)$(CPUNAME).lib /opt/fcc/lib/
	cp crt0$(PLATFORM)_$(USERCPU)_rel.rel crt0nostdio$(PLATFORM)_$(USERCPU)_rel.rel /opt/fcc/lib/
