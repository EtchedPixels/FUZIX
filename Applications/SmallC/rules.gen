# $1 is special - it's the return path and the one case we must not eliminate
# any trailing r1 load so write out the ;end marker if we are merging it
jump $1
;end
$1:
=
$1:

jump $1
;end
=
jump $1

# Normal cases

jump %1
;end
%1:
=
;end
%1:

jumpz r1 %1
;end
jump %2
%1:
=
jumpnz r1 %2
;end
%1:

jumpnz r1 %1
;end
jump %2
%1:
=
jumpz r1 %2
;end

load r1 %1
add r1 1
store r1 %1
sub r1 1
=
load r1 %1++

load r1 %1
add r1 1
store r1 %1
=
load r1 ++%1


load r1 %1
sub r1 1
store r1 %1
add r1 1
=
load r1 %1--

load r1 %1
sub r1 1
store r1 %1
=
load r1 --%1


add r1 1
loadsb r1 (r1)
=
loadsb r1 (+r1)

sub r1 1
loadsb r1 (r1)
=
loadsb r1 (-r1)

# Fixme do rest of jumps

test r1
jumpnz %1
=
jumpnz r1 %1

test r1
jumpz %1
=
jumpz r1 %1

add sp %1
ret
=
ret %1

load r1 %1
store r1 r%2
;end
=
load r%2 %1
;end

#
#	Compress simple register maths
#	TODO: non add/sub cases
#

load r1 r%1
push r1
load r1 %2
popadd r1 r2
store r1 r%1
;end
=
add r%1 %2

load r1 r%1
push r1
load r1 %2
popsub r1 r2
store r1 r%1
;end
=
add r%1 %2

#
#	Similar idea for conditionals
#

load r1 r%1
push r1
load r1 %2
poplt r1 r2
=
lt r%1 %2

#
#	Side effect only optimisations
#

load r1 ++r%1
;end
=
inc r1

load r1 --r%1
;end
=
dec r1



load r1 r%1++
;end
=
inc r1

load r1 r%1--
;end
=
dec r1


